var common = require('./common'),
Q = require('q'),
fs = require('fs'),
path = require('path'),
mkdirp = require('mkdirp')

function Cache(options){	
	this.location = options.location;	
	if(!fs.existsSync(this.location)) mkdirp.sync(this.location);	
}

Cache.prototype.read = function(options){
	var def = Q.defer();
	var key = makeKey(options);
	fs.readFile(path.join(this.location, key), function(err, data){
		if(err) def.reject(err);
		else def.resolve(data.toString());
	})
	
	return def.promise;
}

module.exports = Cache;

Cache.prototype.write = function(options, data){
	var def = Q.defer();
	var key = makeKey(options);
	fs.writeFile(path.join(this.location, key), data, function(err){
		if(err) def.reject(err);
		else def.resolve(true);
	})
	
	return def.promise;
}

Cache.prototype.exists = function(options){	
	var key = makeKey(options);
	return fs.existsSync(path.join(this.location, key));
}

function makeKey(options){
	if(typeof options === 'string') options = {url: options};
	if(options.file_name) return options.file_name; //custom file name
	
	var key = [options.url, options.form? JSON.stringify(options.form) : '', options.body || ''].join('');
	key = common.md5(key) + '.htm';
	
	return key;
}

